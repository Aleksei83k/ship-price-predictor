# predict_price.py
import pandas as pd
import joblib
from datetime import datetime
import os

MODEL_PATH = "data/ship_price_model.pkl"
FEATURES_PATH = "data/ship_price_model_features.pkl"


def get_user_input():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Å—É–¥–Ω–∞"""
    print("\n=== –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å—É–¥–Ω–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã ===")
    dwt = input("–î–µ–¥–≤–µ–π—Ç (dwt, –Ω–∞–ø—Ä–∏–º–µ—Ä: 60000): ").replace(' ', '')
    year = int(input("–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (year, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2018): "))
    ship_type = input("–¢–∏–ø —Å—É–¥–Ω–∞ (type, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3 ‚Äî –∫–∞–∫ –≤ –¥–∞–Ω–Ω—ã—Ö): ").strip()
    country = input("–°—Ç—Ä–∞–Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (country, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3 ‚Äî –∫–∞–∫ –≤ –¥–∞–Ω–Ω—ã—Ö): ").strip()
    date_str = input("–î–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ (date, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-07-01): ").strip()

    return {
        'dwt': float(dwt),
        'year': year,
        'type': ship_type,
        'country': country,
        'date': date_str
    }


def main():
    print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...")
    if not os.path.exists(MODEL_PATH):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {MODEL_PATH}")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ train_model.py –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏!")
        return

    model = joblib.load(MODEL_PATH)
    feature_names = joblib.load(FEATURES_PATH)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_input()

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    new_ship = pd.DataFrame({
        'dwt': [user_data['dwt']],
        'year': [user_data['year']],
        'date': [int(datetime.fromisoformat(user_data['date']).timestamp())]
    })

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è type –∏ country (one-hot encoding)
    for col in feature_names:
        if col.startswith('type_'):
            new_ship[col] = [1 if col == f"type_{user_data['type']}" else 0]
        elif col.startswith('country_'):
            new_ship[col] = [1 if col == f"country_{user_data['country']}" else 0]

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã (–µ—Å–ª–∏ –≤–¥—Ä—É–≥)
    for col in feature_names:
        if col not in new_ship.columns:
            new_ship[col] = 0

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    new_ship = new_ship[feature_names]

    # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
    predicted_price = model.predict(new_ship)[0]

    print("\n" + "="*50)
    print("üìà –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –¶–ï–ù–´")
    print("="*50)
    print(f"–¢–∏–ø —Å—É–¥–Ω–∞:      {user_data['type']}")
    print(f"–î–µ–¥–≤–µ–π—Ç:        {user_data['dwt']:,}")
    print(f"–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:  {user_data['year']}")
    print(f"–°—Ç—Ä–∞–Ω–∞:         {user_data['country']}")
    print(f"–î–∞—Ç–∞ —Å–¥–µ–ª–∫–∏:    {user_data['date']}")
    print("-"*50)
    print(f"üí∞ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${predicted_price:,.2f}")
    print("="*50)


if __name__ == "__main__":
    main()